{"version":3,"sources":["components/listview/index.jsx","components/tableview/index.jsx","components/controller/search-panel.jsx","components/controller/filter-controller.jsx","components/controller/view-controller.jsx","components/controller/bulk-controller.jsx","components/controller/index.jsx","components/create-todo-form/index.jsx","components/todos/index.jsx","App.jsx","index.js"],"names":["ListItem","todo","toggleSelect","toggleComplete","ListGroupItem","className","CustomInput","type","id","checked","isSelect","onChange","text","time","toDateString","Button","color","isComplete","onClick","ListView","todos","ListGroup","map","key","RowItem","scope","TableView","Table","SearchPanel","term","handleSearch","toggleForm","Input","placeholder","value","e","target","FilterController","handleFilter","ButtonGroup","ViewController","view","changeView","Label","for","name","BulkController","clearSelected","clearCompleted","reset","Controller","Row","Col","md","size","CreateTodoForm","state","description","handleChange","event","setState","handleSubmit","preventDefault","props","createTodo","Form","onSubmit","this","FormGroup","React","Component","Todos","Date","isOpenTodoForm","searchTerm","filter","todoId","find","tId","performSearch","toLowerCase","includes","performFilter","shortid","generate","getView","Modal","isOpen","toggle","ModalHeader","ModalBody","App","Container","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26242d0e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ListGroup, ListGroupItem, CustomInput, Button } from \"reactstrap\";\r\n\r\n// List item component\r\nconst ListItem = ({ todo, toggleSelect, toggleComplete }) => {\r\n  return (\r\n    <ListGroupItem className=\"d-flex align-items-center\">\r\n      <CustomInput\r\n        type=\"checkbox\"\r\n        id={todo.id}\r\n        checked={todo.isSelect}\r\n        onChange={() => toggleSelect(todo.id)}\r\n      />\r\n      <div className=\"mx-3\">\r\n        <h4>{todo.text}</h4>\r\n        <p>{todo.time.toDateString()}</p>\r\n      </div>\r\n      <Button\r\n        className=\"ml-auto\"\r\n        color={todo.isComplete ? \"danger\" : \"success\"}\r\n        onClick={() => toggleComplete(todo.id)}\r\n      >\r\n        {todo.isComplete ? \"Completed\" : \"Running\"}\r\n      </Button>\r\n    </ListGroupItem>\r\n  );\r\n};\r\n\r\nListItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  toggleComplete: PropTypes.func.isRequired,\r\n  toggleSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nconst ListView = ({ todos, toggleSelect, toggleComplete }) => {\r\n  return (\r\n    <ListGroup>\r\n      {todos.map((todo) => (\r\n        <ListItem\r\n          key={todo.id}\r\n          todo={todo}\r\n          toggleSelect={toggleSelect}\r\n          toggleComplete={toggleComplete}\r\n        />\r\n      ))}\r\n    </ListGroup>\r\n  );\r\n};\r\n\r\nListView.propTypes = {\r\n  todos: PropTypes.object.isRequired,\r\n  toggleComplete: PropTypes.func.isRequired,\r\n  toggleSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ListView;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CustomInput, Button, Table } from \"reactstrap\";\r\n\r\nconst RowItem = ({ todo, toggleSelect, toggleComplete }) => {\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">\r\n        <CustomInput\r\n          type=\"checkbox\"\r\n          id={todo.id}\r\n          checked={todo.isSelect}\r\n          onChange={() => toggleSelect(todo.id)}\r\n        />\r\n      </th>\r\n      <td>{ todo.time.toDateString() }</td>\r\n      <td>{ todo.text }</td>\r\n      <td>\r\n        <Button\r\n          color={todo.isComplete ? \"danger\" : \"success\"}\r\n          onClick={() => toggleComplete(todo.id)}\r\n        >\r\n          {todo.isComplete ? \"Completed\" : \"Running\"}\r\n        </Button>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nRowItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  toggleComplete: PropTypes.func.isRequired,\r\n  toggleSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nconst TableView = ({ todos, toggleSelect, toggleComplete }) => {\r\n  return (\r\n    <Table>\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Time</th>\r\n          <th>Todo</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {todos.map((todo) => (\r\n          <RowItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            toggleSelect={toggleSelect}\r\n            toggleComplete={toggleComplete}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </Table>\r\n  );\r\n};\r\n\r\nTableView.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  toggleComplete: PropTypes.func.isRequired,\r\n  toggleSelect: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TableView;\r\n","import React from 'react';\r\nimport {Input, Button} from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nconst SearchPanel = ({term, handleSearch, toggleForm}) => {\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <Input \r\n        placeholder=\"Enter Search Term\"\r\n        className='mr-3'\r\n        value={term}\r\n        onChange={(e) => handleSearch(e.target.value)}\r\n      />\r\n      <Button color='success' onClick={toggleForm}>\r\n        New\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nSearchPanel.propTypes = {\r\n  term: PropTypes.string.isRequired,\r\n  handleSearch: PropTypes.func.isRequired,\r\n  toggleForm: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default SearchPanel;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, ButtonGroup} from 'reactstrap';\r\n\r\nconst FilterController = ({handleFilter}) => {\r\n  return (\r\n    <ButtonGroup>\r\n      <Button onClick={()=> handleFilter('all')}>\r\n        All\r\n      </Button>\r\n      <Button onClick={()=> handleFilter('running')}>\r\n        Running\r\n      </Button>\r\n      <Button onClick={()=> handleFilter('completed')}>\r\n        Completed\r\n      </Button>\r\n    </ButtonGroup>\r\n  )\r\n}\r\n\r\nFilterController.propTypes = {\r\n  handleFilter: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FilterController;","import React from 'react';\r\nimport {Label, CustomInput} from 'reactstrap';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ViewController = ({view, changeView}) =>{\r\n  return (\r\n    <div className=\"d-flex\">\r\n      <Label for='list-view' className='mr-4'>\r\n        <CustomInput \r\n          type='radio'\r\n          name='view'\r\n          value='list'\r\n          id='list-view'\r\n          onChange={changeView}\r\n          className='d-inline-block'\r\n          checked={view === 'list'}\r\n        />\r\n        List View\r\n      </Label>\r\n      <Label for='table-view' className='mr-4'>\r\n        <CustomInput \r\n          type='radio'\r\n          name='view'\r\n          value='table'\r\n          id='table-view'\r\n          onChange={changeView}\r\n          className='d-inline-block'\r\n          checked={view === 'table'}\r\n        />\r\n        Table View\r\n      </Label>\r\n    </div>\r\n  )\r\n}\r\n\r\nViewController.propTypes = {\r\n  view: PropTypes.string.isRequired,\r\n  changeView: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default ViewController;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {Button, ButtonGroup} from 'reactstrap';\r\n\r\nconst BulkController = ({clearSelected, clearCompleted, reset}) => {\r\n  return (\r\n    <ButtonGroup>\r\n      <Button color='danger' onClick={clearSelected}>\r\n        Clear Selected\r\n      </Button>\r\n      <Button color='danger' onClick={clearCompleted}>\r\n        Clear Completed\r\n      </Button>\r\n      <Button color='danger' onClick={reset}>\r\n        Reset\r\n      </Button>\r\n    </ButtonGroup>\r\n  )\r\n}\r\n\r\nBulkController.propTypes = {\r\n  clearSelected: PropTypes.func.isRequired,\r\n  clearCompleted: PropTypes.func.isRequired,\r\n  reset: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default BulkController;","import React from \"react\";\r\nimport SearchPanel from \"../controller/search-panel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport FilterController from \"./filter-controller\";\r\nimport ViewController from \"./view-controller\";\r\nimport BulkController from \"./bulk-controller\";\r\n\r\nconst Controller = ({\r\n  term,\r\n  handleSearch,\r\n  toggleForm,\r\n  handleFilter,\r\n  view,\r\n  changeView,\r\n  clearSelected,\r\n  clearCompleted,\r\n  reset,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <SearchPanel\r\n        term={term}\r\n        handleSearch={handleSearch}\r\n        toggleForm={toggleForm}\r\n      />\r\n      <Row className=\"my-4\">\r\n        <Col md={{ size: 4 }}>\r\n          <FilterController handleFilter={handleFilter} />\r\n        </Col>\r\n\r\n        <Col md={{ size: 4 }}>\r\n          <ViewController \r\n            view={view}\r\n            changeView={changeView} \r\n          />\r\n        </Col>\r\n\r\n        <Col md={{ size: 4 }} className=\"d-flex\">\r\n          <div className=\"ml-auto\">\r\n            <BulkController \r\n              clearSelected={clearSelected} \r\n              clearCompleted={clearCompleted}\r\n              reset={reset}\r\n            />\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nController.propTypes = {\r\n  term: PropTypes.string.isRequired,\r\n  handleSearch: PropTypes.func.isRequired,\r\n  toggleForm: PropTypes.func.isRequired,\r\n  handleFilter: PropTypes.func.isRequired,\r\n  changeView: PropTypes.func.isRequired,\r\n  clearSelected: PropTypes.func.isRequired,\r\n  clearCompleted: PropTypes.func.isRequired,\r\n  reset: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Controller;\r\n","import React from \"react\";\r\nimport { Form, FormGroup, Label, Input, Button } from \"reactstrap\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass CreateTodoForm extends React.Component {\r\n  state = {\r\n    text: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.createTodo(this.state);\r\n    event.target.reset();\r\n    this.setState({\r\n      text: \"\",\r\n      description: \"\",\r\n    });\r\n  };\r\n\r\n\r\n  render(){\r\n    return (\r\n      <Form onSubmit={this.handleSubmit}>\r\n        <FormGroup>\r\n          <Label>Enter Task</Label>\r\n          <Input \r\n            placeholder='Task Title.'\r\n            name='text'\r\n            value={this.state.text}\r\n            onChange={this.handleChange}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label>Enter Description</Label>\r\n          <Input \r\n            type='textarea'\r\n            placeholder='Description of your Task.'\r\n            name='description'\r\n            value={this.state.description}\r\n            onChange={this.handleChange}\r\n          />\r\n        </FormGroup>\r\n        <Button type='submit'>Create Task</Button>\r\n      </Form>\r\n    )\r\n  }\r\n}\r\n\r\nCreateTodoForm.propTypes = {\r\n  createTodo: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default CreateTodoForm;","import React from \"react\";\r\nimport ListView from \"../listview\";\r\nimport TableView from \"../tableview\";\r\nimport Controller from \"../controller\";\r\nimport CreateTodoForm from \"../create-todo-form\";\r\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\r\nimport shortid from \"shortid\";\r\n\r\nclass Todos extends React.Component {\r\n  state = {\r\n    todos: [\r\n      {\r\n        id: \"1\",\r\n        text: \"Highlight the selected Menu when clicked\",\r\n        description: \"simple description\",\r\n        time: new Date(),\r\n        isComplete: false,\r\n        isSelect: false,\r\n      },\r\n      {\r\n        id: \"2\",\r\n        text: \"Try different design pattern\",\r\n        description: \"simple description\",\r\n        time: new Date(),\r\n        isComplete: false,\r\n        isSelect: false,\r\n      },\r\n      {\r\n        id: \"3\",\r\n        text: \"new task\",\r\n        description: \"simple description\",\r\n        time: new Date(),\r\n        isComplete: false,\r\n        isSelect: false,\r\n      },\r\n    ],\r\n    isOpenTodoForm: false,\r\n    searchTerm: \"\",\r\n    view: \"list\",\r\n    filter: 'all',\r\n  };\r\n\r\n  toggleSelect = (todoId) => {\r\n    const todos = [...this.state.todos];\r\n    const todo = todos.find((tId) => tId.id === todoId);\r\n    todo.isSelect = !todo.isSelect;\r\n    this.setState({ todos });\r\n  };\r\n\r\n  toggleComplete = (todoId) => {\r\n    const todos = [...this.state.todos];\r\n    const todo = todos.find((tId) => tId.id === todoId);\r\n    todo.isComplete = !todo.isComplete;\r\n    this.setState({ todos });\r\n  };\r\n\r\n  // Todo create modal open or not\r\n  toggleForm = () => {\r\n    this.setState({\r\n      isOpenTodoForm: !this.state.isOpenTodoForm,\r\n    });\r\n  };\r\n\r\n  handleSearch = (value) => {\r\n    this.setState({ searchTerm: value });\r\n  };\r\n\r\n  performSearch = () => {\r\n    return this.state.todos.filter((todo) =>\r\n      todo.text.toLowerCase().includes(this.state.searchTerm.toLowerCase())\r\n    );\r\n  };\r\n\r\n  performFilter = (todos) => {\r\n    const {filter} = this.state\r\n    if(filter === 'completed'){\r\n      return todos.filter(todo => todo.isComplete)\r\n    } else if (filter === 'running'){\r\n      return todos.filter(todo => !todo.isComplete)\r\n    } else{\r\n      return todos;\r\n    }\r\n  };\r\n\r\n  createTodo = (todo) => {\r\n    todo.id = shortid.generate();\r\n    todo.time = new Date();\r\n    todo.isComplete = false;\r\n    todo.isSelect = false;\r\n\r\n    // immutable way ???\r\n    // ... spread operator\r\n    const todos = [todo, ...this.state.todos];\r\n    this.setState({ todos });\r\n    this.toggleForm();\r\n  };\r\n\r\n  handleFilter = (filter) => {\r\n    this.setState({filter})\r\n  };\r\n\r\n  changeView = (event) => {\r\n    this.setState({\r\n      view: event.target.value,\r\n    });\r\n  };\r\n\r\n  clearSelected = () => {\r\n    const todos = this.state.todos.filter(todo => !todo.isSelect)\r\n    this.setState({todos})\r\n  };\r\n\r\n  clearCompleted = () => {\r\n    const todos = this.state.todos.filter(todo => !todo.isComplete)\r\n    this.setState({todos})\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      filter: 'all',\r\n      searchTerm: '',\r\n      view: 'list',\r\n      isOpenTodoForm: false,\r\n    })\r\n  };\r\n\r\n  getView = () => {\r\n    let todos = this.performSearch();\r\n    todos = this.performFilter(todos);\r\n    return this.state.view === \"list\" ? (\r\n      <ListView\r\n        todos={todos}\r\n        toggleSelect={this.toggleSelect}\r\n        toggleComplete={this.toggleComplete}\r\n      />\r\n    ) : (\r\n      <TableView\r\n        todos={todos}\r\n        toggleSelect={this.toggleSelect}\r\n        toggleComplete={this.toggleComplete}\r\n      />\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 className=\"display-2 text-center mb-5\">Stack Todos</h1>\r\n        <Controller\r\n          term={this.state.searchTerm}\r\n          view={this.state.view}\r\n          handleSearch={this.handleSearch}\r\n          handleFilter={this.handleFilter}\r\n          toggleForm={this.toggleForm}\r\n          changeView={this.changeView}\r\n          clearSelected={this.clearSelected}\r\n          clearCompleted={this.clearCompleted}\r\n          reset={this.reset}\r\n        />\r\n        <div>{this.getView()}</div>\r\n        <Modal isOpen={this.state.isOpenTodoForm} toggle={this.toggleForm}>\r\n          <ModalHeader toggle={this.toggleForm}>\r\n            Create New Task Item\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <CreateTodoForm createTodo={this.createTodo} />\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react';\r\nimport {Container, Row, Col} from 'reactstrap';\r\nimport Todos from './components/todos';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Container className=\"my-3\">\r\n      <Row>\r\n        <Col>\r\n          <Todos />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}